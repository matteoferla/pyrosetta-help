# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, '/Users/matteo/Coding/pyrosetta_help')

# -- pyrosetta install -------------------------------------------------------
import os

from importlib import reload
import pyrosetta_help

pyrosetta_help.install_pyrosetta(username=os.environ.get('PYROSETTA_USERNAME'),
                                 password=os.environ.get('PYROSETTA_PASSWORD'),
                                 )
reload(pyrosetta_help)


# this raises too many errors:
# from unittest.mock import MagicMock
# import sys
#
# sys.modules['pyrosetta'] = MagicMock()

# -- Project information -----------------------------------------------------

project = 'pyrosetta-help'
author = 'Matteo Ferla'
copyright = '2022, University of Oxford'
github_username = 'matteoferla'
github_repository = 'pyrosetta_help'

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'readthedocs_ext.readthedocs',
    #'sphinx_toolbox.more_autodoc'  test required
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.todo',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']


def skip(app, what, name, obj, would_skip, options):
    if name in ( '__init__',):
        return False
    return would_skip

def setup(app):
    app.connect('autodoc-skip-member', skip)

# -- Options for HTML output -------------------------------------------------

html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = []


# -- Extension configuration -------------------------------------------------

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# --- add md files ---------------------------------------------------------

import m2r2  # noqa
import os, re
from typing import Optional

repo_base_path = os.path.abspath("../")

def convert_write(markdown_filename, srt_filename, change_title:Optional[str]=None):
    # unlike Fragmenstein there are no images to convert
    # so we can just copy the file
    with open(markdown_filename) as fh:
        markdown_block = fh.read()
    if change_title:
        markdown_block = re.sub(r'#+\s*(.*)', r'# ' + change_title, markdown_block, 1)
    #markdown_block = re.sub(r'\[(?P<label>.*?)\]\((?P<link>.*?)\)', fix_md_link, markdown_block)
    rst_block = m2r2.convert(markdown_block)
    with open(srt_filename, 'w') as fh:
        fh.write(rst_block)

convert_write(os.path.join(repo_base_path, 'README.md'), 'introduction.rst', 'pyrosetta-help overview')